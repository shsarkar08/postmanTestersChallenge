{
	"info": {
		"_postman_id": "2201288d-9c25-4aaf-ad10-29b2fe9afa9c",
		"name": "Day 05: Variables and scripts",
		"description": "## Instructions for Day 5: Variables and scripts\n\n1.  **Get the challenge:** Fork the parent collection to your own public workspace.\n2.  **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n\n## Learning objectives\n- Set and get variables using code\n- Use variables to store and pass along data\n- Run a collection or folder \n\n## Concepts covered\n\n*   [Variable scopes](https://learning.postman.com/docs/sending-requests/variables/)\n*   [Defining variables](https://learning.postman.com/docs/sending-requests/variables/#defining-variables)\n* [Defining variables in scripts](https://learning.postman.com/docs/sending-requests/variables/#defining-variables-in-scripts)\n*   [Accessing variables](https://learning.postman.com/docs/sending-requests/variables/#defining-variables)\n*   [Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n* [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)\n    \n## Additional resources\n\n*   [10 tips for working with variables](https://blog.postman.com/10-tips-for-working-with-postman-variables/) blog",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16143001"
	},
	"item": [
		{
			"name": "Variables and scripts",
			"item": [
				{
					"name": "get Canadian user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resp = pm.response.json()\r",
									"\r",
									"let ftitle = resp.results[0].name['title']\r",
									"let fname = resp.results[0].name['first']\r",
									"let lname = resp.results[0].name['last']\r",
									"let name = ftitle + \" \" + fname + \" \" + lname\r",
									"let email = resp.results[0].email\r",
									"let uuid = resp.results[0].login['uuid']\r",
									"console.log(name, email, uuid)\r",
									"\r",
									"pm.collectionVariables.set('name', name)\r",
									"pm.collectionVariables.set('email', email)\r",
									"pm.collectionVariables.set('uuid', uuid)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://randomuser.me/api?nat=CA",
							"protocol": "https",
							"host": [
								"randomuser",
								"me"
							],
							"path": [
								"api"
							],
							"query": [
								{
									"key": "nat",
									"value": "CA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "echo the user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": {{name}},\r\n\"email\": {{email}},\r\n\"uuid\": {{uuid}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			],
			"description": "Let's use the [Random User API](https://randomuser.me/) to pass data from one request to another using variables.\n\n1.  **Add a request**: Add a request called `get Canadian user` to the folder `Variables and scripts` with the following details:\n    *   `GET` method\n    *   `https://randomuser.me/api` request URL\n    *   Query parameter called `nat` with the value `CA`  \n        Send the request to make sure you receive a successful response.\n2.  **Add another request**: Add a second request called `echo the user` after the first one with the following details:\n    *   `POST` method\n    *   `https://postman-echo.com/post` request URL\n    *   JSON request body formatted like this:\n        \n        ``` json\n        {\n        \"name\": \"Dawn Ellis\",\n        \"email\": \"dawn.ellis@example.com\",\n        \"uuid\": \"334eecea-607d-4111-90ee-e57bea971654\"\n        }\n        \n        ```\n        \n3.  **Set variables**: Under the **Tests** tab of the `get Canadian user` request, initialize **collection variables** to store the data returned from the API for the first user in the response object. This information is required for the next request.\n4.  **Get variables**: Under the **Body** tab in the `echo the user` request, use the variables from the previous step. The request body should no longer be hard coded, and instead, should reference the variables you just created. Step through the workflow by running each request one at a time to ensure you are setting and getting the variables properly.\n5.  **Run the folder**: Once you think you have it, run this folder using the [runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/) to make sure there are no errors.\n    \nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 6",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 05: Variables and scripts\")",
									"    pass += 1",
									"})",
									"",
									"let folder = collection.item.find(fol => {return fol.name === \"Variables and scripts\"})",
									"",
									"pm.test(\"Requests added correctly\", () => {",
									"    pm.expect(folder.item.length, 'check number of requests').equals(2)",
									"",
									"    let canadianRequest = folder.item.find(req => { return req.name === \"get Canadian user\"})",
									"    pm.expect(canadianRequest.name, 'check name').equals(\"get Canadian user\")",
									"    pm.expect(canadianRequest.request.method, 'check method').equals(\"GET\")",
									"    pm.expect(canadianRequest.request.url.query.length, 'check params').equals(1)",
									"    pm.expect(canadianRequest.request.url.query[0].key, 'check param key').equals(\"nat\")",
									"    pm.expect(canadianRequest.request.url.query[0].value, 'check param value').equals(\"CA\")",
									"",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the user\"})",
									"    pm.expect(echoRequest.name, 'check name').equals(\"echo the user\")",
									"    pm.expect(echoRequest.request.method, 'check method').equals(\"POST\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Collection variables set\", () => {",
									"    let canadianRequest = folder.item.find(req => { return req.name === \"get Canadian user\"})",
									"    let canadianTest = canadianRequest.event.find(event => { return event.listen === \"test\" })",
									"    pm.expect(canadianTest.listen).equals(\"test\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check collection variables set').contains(\"pm.collectionVariables.set\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed name').contains(\"name\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed email').contains(\"email\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed uuid').contains(\"uuid\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Echo body added\", () => {",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the user\"})",
									"",
									"    pm.expect(echoRequest.request.body.mode, 'check mode').equals(\"raw\")",
									"    pm.expect(echoRequest.request.body.options.raw.language, 'check language').equals(\"json\")",
									"    pm.expect(echoRequest.request.body.raw, 'check body not hardcoded').does.not.contain(\"dawn.ellis@example.com\")",
									"",
									"    pass += 1",
									"})",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `üç™ passing!",
									"        <br />",
									"        <img src=\"https://media4.giphy.com/media/3zlnLYzubrKzGHW9pM/giphy.gif?cid=ecf05e47tfl09175r91m1mh7d5rzfs39uve5l87uuxyywjub&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `üôÖ please try again",
									"        <br />",
									"        <img src=\"https://media1.giphy.com/media/ebbNjZ3P6Mq7C/giphy.gif?cid=ecf05e47wkv0fanzcddo3yh13fqy4qcj26wvuwsr1y3tuext&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/16143001-2201288d-9c25-4aaf-ad10-29b2fe9afa9c",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"16143001-2201288d-9c25-4aaf-ad10-29b2fe9afa9c"
							]
						},
						"description": "It's time to check your collection.\n\n1.  **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n1.  **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer. ‚ö† Remember to add sensitive values like an API key to the `CURRENT VALUE` (and not `INITIAL VALUE`) of your public workspace.\n1.  **Validate your solution**: Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n    \nIf you have any failures, [review the failed test results](https://youtu.be/S3GKLTVRtmE) or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "uuid",
			"value": ""
		}
	]
}
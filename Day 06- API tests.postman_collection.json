{
	"info": {
		"_postman_id": "e4c0e114-356f-4b5a-874b-1873c59c9cd1",
		"name": "Day 06: API tests",
		"description": "## Instructions for Day 6: API tests\n\n1.  **Get the challenge:** Fork the parent collection to your own public workspace.\n2.  **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n    \n## Learning objectives\n- Parse a response object\n- Insert a test via snippet\n- Write a custom Postman test\n- Use API calls to replicate a user scenario\n- Add multiple assertions to a test\n- Explain how Chai.js BDD syntax is used in Postman\n\n## Concepts covered\n\n*   [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n*   [Test snippets](https://learning.postman.com/docs/writing-scripts/test-scripts/#using-snippets)\n*  [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)\n* [Postman sandbox](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/) docs\n\n## Additional resources\n\n* [Review Test Results in Postman](https://youtu.be/S3GKLTVRtmE) video\n*   [Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/) in the docs\n*   [Intro to writing tests - with examples](https://www.postman.com/postman/workspace/postman-team-collections/collection/1559645-13bd44c4-94ec-420a-8390-8ff44b60f14d?ctx=documentation) sample collection\n*   [Chai.js](https://www.chaijs.com/) docs\n* [Continuous Quality](https://youtu.be/zrmQAgixMpU) webinar video\n* [Continuous Testing](https://youtu.be/sB2HHrezQOo) webinar video",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16143001"
	},
	"item": [
		{
			"name": "API tests",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json().response\r",
											"\r",
											"pm.collectionVariables.set('user_id', resp.user_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "Register a new user with The Good Bank. The username must be unique."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"kmmanoj96001\",\n  \"password\": \"kmmanoj96001pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					]
				},
				{
					"name": "New user workflow",
					"item": [
						{
							"name": "User Login Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', ()=>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"let resp = pm.response.json().response\r",
											"\r",
											"pm.collectionVariables.set(\"user_id\", resp.user_id);\r",
											"pm.collectionVariables.set(\"token\", resp.session_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"kmmanoj96001\",\n  \"password\": \"kmmanoj96001pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "Account summary Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', ()=>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Status is OK', ()=>{\r",
											"    pm.expect(pm.response.json().status).to.eql(\"OK\")\r",
											"})\r",
											"\r",
											"let res = pm.response.json()\r",
											"pm.test(\"Response object is as expected\", function () {\r",
											"pm.expect(res.response).to.be.an('object')\r",
											"pm.expect(res.response.balance).to.be.a('number')\r",
											"pm.expect(res.response).to.have.property('user_id')\r",
											"pm.expect(res.response.user_id).equals(pm.collectionVariables.get('user_id'))\r",
											"pm.expect(res.response).to.have.property('last_transaction')\r",
											"pm.expect(res.response.last_transaction).to.be.a('number')\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/account/:user_id/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"account",
										":user_id",
										"summary"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "(Required) "
										}
									]
								},
								"description": "Fetch account summary for a single user."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/account/:user_id/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"account",
												":user_id",
												"summary"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "commodo",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "User Logout Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successfully logged out\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"logged out!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								},
								"description": "This API revokes an active user session."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-API-key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"logout"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "Account summary 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Status is Forbidden\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"FORBIDDEN\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/account/:user_id/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"account",
										":user_id",
										"summary"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "(Required) "
										}
									]
								},
								"description": "Fetch account summary for a single user."
							},
							"response": [
								{
									"name": "Successful response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/account/:user_id/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"account",
												":user_id",
												"summary"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "commodo",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-api-key",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "1.  **Create API and collection**: Import [this API specification](https://raw.githubusercontent.com/kmmanoj96/vulnerable-apis/main/openAPISpecBank.yaml), and generate a collection from the specification. You can do this using [any method you prefer](https://learning.postman.com/docs/designing-and-developing-your-api/importing-an-api/). Once this step is completed, make sure you have an API and associated collection displaying under **Collections** in the sidebar, both called `The Good Bank APIs`.\n2.  **Add folders**: Add two new folders called `Setup` and `New user workflow` nested under the `API tests` folder.\n3.  **Add URL**: Find the `baseUrl` used in the `Good Bank API` collection, and add it as a collection variable called `baseUrl` to the `Day 06: API tests` collection.\n4.  **Set up a new user**: Find the following request in the `The Good Bank APIs` collection, and duplicate it over to the `Setup` folder.\n    \n    *   `POST` Create User\n    \n    Under the **Body** tab, update the username and password of your new user. Make a note of this information using any method you prefer. Hit **Send** to create a new user. The response will contain a `user_id`. Create a collection variable called `user_id` with this information, using any method you prefer.\n5.  **Add a scenario**: Find the following requests in the `The Good Bank APIs` collection, and duplicate them over to the `New user workflow` folder.\n    \n    *   `POST` User Login\n    *   `GET` Account summary\n    *   `GET` User Logout\n    *   `GET` Account summary 2\n    \n    Find the `User Login` request, and update the request body with the `username` and `password` of the new user you created in the previous step. Add a Postman test to verify a successful response (you may need to send the request first). Then, add some code under the **Tests** tab to set two collection variables (`user_id` to store the logged in user's id and `token` to store the session token for the logged in user). Send the request again to verify the variables are set correctly.\n6.  **Add authorization**: Set an `API Key` authorization type for the folder `New user workflow` using the new `token` variable. This particular API requires that a token be submitted as a request header called `x-api-key`. Each request within the `New user workflow` folder should inherit authorization from the folder.\n7.  **Continue the scenario**: [Add at least one test](https://learning.postman.com/docs/writing-scripts/test-scripts/) to each request within the `New user workflow` to verify a successful response.\n    *   `POST` User Login\n    *   `GET` Account summary - Update the path parameter to utilize your new `user_id` variable.\n    *   `GET` User Logout\n    *   `GET` Account summary 2 - Update your test of a successful response to verify a `403` HTTP status code, since after the user logs out, they should not be able to access their account summary.\n1. **Multiple assertions**: Add the following code to the first `Account summary` request. This parses the response object, and lists three expectations about the response object within a single test.\n```javascript\nlet res = pm.response.json()\npm.test(\"Response object is as expected\", function () {\npm.expect(res.response).to.be.an('object')\n pm.expect(res.response.balance).to.be.a('number')\n pm.expect(res.response.user_id).equals(pm.collectionVariables.get('user_id'))\n})\n```\nReview the [Chai.js documentation](https://www.chaijs.com/api/bdd/) and [these test examples](https://www.postman.com/postman/workspace/test-examples-in-postman/collection/1559645-820d771d-70ab-452f-9edd-0904dbc315b8?ctx=documentation). Add at least three more expectations within this test, such as the object's properties, values, or data types. \n8.  **Run the folder**: Use the runner to execute all the requests in the folder `New user workflow`. Make sure all your tests pass, and save your changes.\n    \nIn upcoming challenges, we'll learn more about [testing for collections and folders](https://learning.postman.com/docs/writing-scripts/test-scripts/#testing-collections-and-folders), automating tests, and more advanced scripts.\n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 7",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 06: API tests\")",
									"    pass += 1",
									"})",
									"",
									"let scenarioFolder = collection.item.find(fol => {return fol.name === \"API tests\"})",
									"",
									"pm.test(\"Folders added correctly\", () => {",
									"    pm.expect(collection.item.length, 'check number of folders').equals(2)",
									"",
									"    let setupFolder = scenarioFolder.item.find(fol => { return fol.name === \"Setup\"})",
									"    pm.expect(setupFolder.item.length, 'check requests in first folder').equals(1)",
									"",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"    pm.expect(newFlowFolder.item.length, 'check requests in second folder').equals(4)",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Authorization added correctly\", () => {",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"    pm.expect(newFlowFolder.auth.type).equals(\"apikey\")",
									"    ",
									"    let value = newFlowFolder.auth.apikey.find(item => { return item.key === \"value\" })",
									"    pm.expect(value.value).equals(\"{{token}}\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Variables added correctly\", () => {",
									"",
									"    let baseVar = collection.variable.find(variable => { return variable.key === 'baseUrl'})",
									"    pm.expect(baseVar.key, 'check base URL variable set').to.equal('baseUrl')",
									"    pm.expect(baseVar.value, 'check base URL').to.equal('http://security.postman-breakable.com')",
									"",
									"    let tokenVar = collection.variable.find(variable => { return variable.key === 'token'})",
									"    pm.expect(tokenVar.key, 'check token variable set').to.equal('token')",
									"",
									"    let idVar = collection.variable.find(variable => { return variable.key === 'user_id'})",
									"    pm.expect(idVar.key, 'check id variable set').to.equal('user_id')",
									"    ",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Tests added correctly\", () => {",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"",
									"    let firstRequest = newFlowFolder.item.find(req => { return req.name === \"User Login\" | req.name === \"User Login Copy\"})",
									"    let firstTest = firstRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(firstTest.script.exec.toString(), 'check first test').to.include(\"pm.test\")",
									"",
									"    let secondRequest = newFlowFolder.item.find(req => { return req.name === \"Account summary\" | req.name === \"Account summary Copy\"})",
									"    let secondTest = secondRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(secondTest.script.exec.toString(), 'check second test').to.include(\"pm.test\")",
									"",
									"    let thirdRequest = newFlowFolder.item.find(req => { return req.name === \"User Logout\" | req.name === \"User Logout Copy\"})",
									"    let thirdTest = thirdRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(thirdTest.script.exec.toString(), 'check third test').to.include(\"pm.test\")",
									"",
									"    let fourthRequest = newFlowFolder.item.find(req => { return req.name === \"Account summary 2\"})",
									"    let fourthTest = fourthRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(fourthTest.script.exec.toString(), 'check fourth test').to.include(\"pm.test\")",
									"    pm.expect(fourthTest.script.exec.toString(), 'check 403').to.include(\"403\")",
									"",
									"    pass += 1",
									"})",
									"",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `🍪 passing!",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/n5CHDD8c4sW18Dqz3z/giphy.gif?cid=ecf05e47i4rx73acqxzs4eqcbe2xnv7bczqajkpes126r4js&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `🙅 please try again",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/mcHOSTJMjCrjW/giphy.gif?cid=ecf05e47wkv0fanzcddo3yh13fqy4qcj26wvuwsr1y3tuext&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/16143001-e4c0e114-356f-4b5a-874b-1873c59c9cd1",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"16143001-e4c0e114-356f-4b5a-874b-1873c59c9cd1"
							]
						},
						"description": "It's time to check your collection.\n\n1.  **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n1.  **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer. ⚠ Remember to add sensitive values like an API key to the `CURRENT VALUE` (and not `INITIAL VALUE`) of your public workspace.\n1.  **Validate your solution**: Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n    \nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://security.postman-breakable.com",
			"type": "string"
		},
		{
			"key": "username",
			"value": "ShahPostman93",
			"type": "string"
		},
		{
			"key": "password",
			"value": "ShahPostman",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}